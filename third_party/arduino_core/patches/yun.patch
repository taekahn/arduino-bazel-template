diff --git cores/arduino/new cores/arduino/new
deleted file mode 100644
index 8cf2103..0000000
--- cores/arduino/new
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
-  Copyright (c) 2014 Arduino.  All right reserved.
-
-  This library is free software; you can redistribute it and/or
-  modify it under the terms of the GNU Lesser General Public
-  License as published by the Free Software Foundation; either
-  version 2.1 of the License, or (at your option) any later version.
-
-  This library is distributed in the hope that it will be useful,
-  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-  See the GNU Lesser General Public License for more details.
-
-  You should have received a copy of the GNU Lesser General Public
-  License along with this library; if not, write to the Free Software
-  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-*/
-
-#ifndef NEW_H
-#define NEW_H
-
-#include <stdlib.h>
-
-namespace std {
-  struct nothrow_t {};
-  extern const nothrow_t nothrow;
-
-  // These are not actually implemented, to prevent overhead and
-  // complexity. They are still declared to allow implementing
-  // them in user code if needed.
-  typedef void (*new_handler)();
-  new_handler set_new_handler(new_handler new_p) noexcept;
-  new_handler get_new_handler() noexcept;
-
-  // This is normally declared in various headers that we do not have
-  // available, so just define it here. We could also use ::size_t
-  // below, but then anyone including <new> can no longer assume
-  // std::size_t is available.
-  using size_t = ::size_t;
-} // namespace std
-
-[[gnu::weak]] void * operator new(std::size_t size);
-[[gnu::weak]] void * operator new[](std::size_t size);
-
-[[gnu::weak]] void * operator new(std::size_t size, const std::nothrow_t tag) noexcept;
-[[gnu::weak]] void * operator new[](std::size_t size, const std::nothrow_t& tag) noexcept;
-
-void * operator new(std::size_t size, void *place) noexcept;
-void * operator new[](std::size_t size, void *place) noexcept;
-
-[[gnu::weak]] void operator delete(void * ptr) noexcept;
-[[gnu::weak]] void operator delete[](void * ptr) noexcept;
-
-#if __cplusplus >= 201402L
-[[gnu::weak]] void operator delete(void* ptr, std::size_t size) noexcept;
-[[gnu::weak]] void operator delete[](void * ptr, std::size_t size) noexcept;
-#endif // __cplusplus >= 201402L
-
-[[gnu::weak]] void operator delete(void* ptr, const std::nothrow_t& tag) noexcept;
-[[gnu::weak]] void operator delete[](void* ptr, const std::nothrow_t& tag) noexcept;
-
-void operator delete(void* ptr, void* place) noexcept;
-void operator delete[](void* ptr, void* place) noexcept;
-
-#endif
-
diff --git cores/arduino/new.h cores/arduino/new.h
index d529853..8cf2103 100644
--- cores/arduino/new.h
+++ cores/arduino/new.h
@@ -1,3 +1,66 @@
-// This file originally used a non-standard name for this Arduino core
-// only, so still expose the old new.h name for compatibility.
-#include "new"
+/*
+  Copyright (c) 2014 Arduino.  All right reserved.
+
+  This library is free software; you can redistribute it and/or
+  modify it under the terms of the GNU Lesser General Public
+  License as published by the Free Software Foundation; either
+  version 2.1 of the License, or (at your option) any later version.
+
+  This library is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+  See the GNU Lesser General Public License for more details.
+
+  You should have received a copy of the GNU Lesser General Public
+  License along with this library; if not, write to the Free Software
+  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+*/
+
+#ifndef NEW_H
+#define NEW_H
+
+#include <stdlib.h>
+
+namespace std {
+  struct nothrow_t {};
+  extern const nothrow_t nothrow;
+
+  // These are not actually implemented, to prevent overhead and
+  // complexity. They are still declared to allow implementing
+  // them in user code if needed.
+  typedef void (*new_handler)();
+  new_handler set_new_handler(new_handler new_p) noexcept;
+  new_handler get_new_handler() noexcept;
+
+  // This is normally declared in various headers that we do not have
+  // available, so just define it here. We could also use ::size_t
+  // below, but then anyone including <new> can no longer assume
+  // std::size_t is available.
+  using size_t = ::size_t;
+} // namespace std
+
+[[gnu::weak]] void * operator new(std::size_t size);
+[[gnu::weak]] void * operator new[](std::size_t size);
+
+[[gnu::weak]] void * operator new(std::size_t size, const std::nothrow_t tag) noexcept;
+[[gnu::weak]] void * operator new[](std::size_t size, const std::nothrow_t& tag) noexcept;
+
+void * operator new(std::size_t size, void *place) noexcept;
+void * operator new[](std::size_t size, void *place) noexcept;
+
+[[gnu::weak]] void operator delete(void * ptr) noexcept;
+[[gnu::weak]] void operator delete[](void * ptr) noexcept;
+
+#if __cplusplus >= 201402L
+[[gnu::weak]] void operator delete(void* ptr, std::size_t size) noexcept;
+[[gnu::weak]] void operator delete[](void * ptr, std::size_t size) noexcept;
+#endif // __cplusplus >= 201402L
+
+[[gnu::weak]] void operator delete(void* ptr, const std::nothrow_t& tag) noexcept;
+[[gnu::weak]] void operator delete[](void* ptr, const std::nothrow_t& tag) noexcept;
+
+void operator delete(void* ptr, void* place) noexcept;
+void operator delete[](void* ptr, void* place) noexcept;
+
+#endif
+
diff --git variants/yun/pins_arduino.h variants/yun/pins_arduino.h
index 7fabb7f..2acb349 100644
--- variants/yun/pins_arduino.h
+++ variants/yun/pins_arduino.h
@@ -20,7 +20,7 @@
   Boston, MA  02111-1307  USA
 */
 
-#include "../leonardo/pins_arduino.h"
+#include "variants/leonardo/pins_arduino.h"
 
 // These serial port names are intended to allow libraries and architecture-neutral
 // sketches to automatically default to the correct port name for a particular type
